package sampleplugin.views;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.part.*;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.ui.*;
import org.eclipse.swt.SWT;

import sampleplugin.Activator;


/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class SampleView2 extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "sampleplugin.views.SampleView";

	private TableViewer viewer;
	private Image image1,image2,image3,image4;
	Action addItemAction, deleteItemAction, selectAllAction;

	/*
	 * The content provider class is responsible for
	 * providing objects to the view. It can wrap
	 * existing objects in adapters or simply return
	 * objects as-is. These objects may be sensitive
	 * to the current input of the view, or ignore
	 * it and always show the same content 
	 * (like Task List, for example).
	 */
	
	
	class ViewContentProvider implements IStructuredContentProvider {
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}
		public void dispose() {
		}
		public Object[] getElements(Object parent) {
			return new String[] { "One", "Two", "Three" };
		}
	}
	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().
					getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}
	}
	class NameSorter extends ViewerSorter {
	}

	/**
	 * The constructor.
	 */
	public SampleView2() {
		image3 = Activator.getImageDescriptor("icons/refresh.png").createImage();
		image1 = Activator.getImageDescriptor("icons/back.png").createImage();
		image2 = Activator.getImageDescriptor("icons/forward.png").createImage();
		image4 = Activator.getImageDescriptor("icons/save.png").createImage();
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite controls) {
		
		
		//Layout of controls inside the plugin view
		controls.setLayout(new GridLayout(5,false));
	    
		final Cursor cursor = new Cursor(controls.getDisplay(),SWT.CURSOR_HAND);
		
	    // Create the back button
	  /*Button button1 = new Button(controls, SWT.PUSH);
	    Button button2 = new Button(controls, SWT.PUSH);
	    Button button3 = new Button(controls, SWT.PUSH); 
	    Button button4 = new Button(controls, SWT.PUSH);*/
	 // Button button5 = new Button(controls, SWT.PUSH);
	  
	// Create the canvas for drawing
	   final Label refimg1=new Label(controls,SWT.None);
	    refimg1.setImage(image1);
	    refimg1.setCursor(cursor);
	    Label refimg2=new Label(controls,SWT.NONE);
	    refimg2.setImage(image2);
	    refimg2.setCursor(cursor);
	    Label refimg3=new Label(controls,SWT.NONE);
	    refimg3.setImage(image3);
	    refimg3.setCursor(cursor);
	    Label refimg4=new Label(controls,SWT.NONE);
	    refimg4.setImage(image4);
	    refimg4.setCursor(cursor);
	  /* Canvas canvas = new Canvas(controls, SWT.FILL);
	   canvas.addPaintListener( new PaintListener() {
	   public void paintControl(PaintEvent e) {
	   GC gc = e.gc;
	   gc.drawImage( image,5,5); // Draw the image
	   }
	   });*/
	
	   // Create the address entry field and set focus to it
	    final Text url = new Text(controls, SWT.BORDER);
	    url.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
	    url.setFocus();

	    //final Text err=new Text(controls,SWT.BORDER);
	   // err.setLayoutData(new GridData(GridData.FILL));
	    
	    Link link = new Link(controls, SWT.NONE);
	    //String message = "Search Engines\n1.<a>Google</a>\n2.<a>Stackoverflow</a>"; 
	    String message = "Search Engines\n1.<a>Google</a>  2.<a>Stackoverflow</a> 3.<a>Krugle</a>";
	    link.setText(message);
	  //link.setSize(400, 100);
	    		  
	    // Create the web browser
	    final Browser browser = new Browser(controls, SWT.NONE);
	
	    GridData gridData = new GridData(GridData.FILL_BOTH);
	    gridData.horizontalAlignment = GridData.FILL;
		gridData.verticalAlignment = GridData.FILL;
		gridData.horizontalSpan = 6;
		gridData.verticalSpan = 6;
		//gridData.grabExcessVerticalSpace = true;
		//gridData.grabExcessHorizontalSpace = true;
		browser.setLayoutData(gridData);
	//	browser.setUrl("www.google.com");
	
		refimg1.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseDown(MouseEvent arg0) {
	        	browser.back();
	        }
	    });

		refimg2.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseDown(MouseEvent arg0) {
	        	browser.forward();
	        }
	    });
		refimg3.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseDown(MouseEvent arg0) {
	        	browser.refresh();;
	        }
	    });
		/*refimg4.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseDown(MouseEvent arg0) {
	        	
	        }
	    });*/
	
		link.addListener(SWT.Selection, new Listener() {
   		  public void handleEvent(Event event) {
   			// if(url.getText()==null)
   	   		// {
   	   		//er.setText("Enter search text!!");
   	   		//System.out.println("No text");
   		//	 }
   	   		// else
   	   		// {
   	   			//System.out.println("text");
   	   			 switch(event.text)
   	   			 {
   	   			 case "Google":
   	   				browser.setUrl("http://www.google.com/search?q="+url.getText());
   	   				 break;
   	   			 case "Stackoverflow":
   	   				browser.setUrl("http://stackoverflow.com/search?q="+url.getText());
   	   				 break;
   	   			 case "Krugle":
	   				browser.setUrl("http://opensearch.krugle.org/document/search/#query="+url.getText());
	   				 break;
   	   			
   	   			 }
   	   	//	 }
   	   	
   		  }
   		  });
   		 
	
	    //Create the back button
	    /*button1.setText("Back");
	    button1.addSelectionListener(new SelectionAdapter() {
	      public void widgetSelected(SelectionEvent event) {
	        browser.back();
	      }
	    });
	    
	    // Create the forward button
	    //button = new Button(controls, SWT.PUSH);
	    button2.setText("Forward");
	    button2.addSelectionListener(new SelectionAdapter() {
	      public void widgetSelected(SelectionEvent event) {
	        browser.forward();
	      }
	    });

	    
	    // Create the refresh button
	    //button = new Button(controls, SWT.PUSH);
	    button3.setText("Refresh");
	    button3.addSelectionListener(new SelectionAdapter() {
	      public void widgetSelected(SelectionEvent event) {
	        browser.refresh();
	      }
	    });

	 // Create the Save button
	    //button = new Button(controls, SWT.PUSH);
	    button4.setText("Save");
	    button4.addSelectionListener(new SelectionAdapter() {
	    	public void widgetSelected(SelectionEvent event) {
	    	//Invoking this method to store the code snippet in local repository
	    			//codeRepository();
		  }
	    });
	    
	    // Create the stop button
	    button = new Button(controls, SWT.PUSH);
	    button.setText("Stop");
	    button.addSelectionListener(new SelectionAdapter() {
	      public void widgetSelected(SelectionEvent event) {
	        browser.stop();
	      }
	    });*/

	    
	    
	    // Create the go button
	    //button = new Button(controls, SWT.PUSH);
	    /*button5.setText("Go");
	    button5.addSelectionListener(new SelectionAdapter() {
	      public void widgetSelected(SelectionEvent event) {
	    	 browser.setUrl("www.google.co.in");
	      }
	    });*/
	    
	    
	}
	
	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}
